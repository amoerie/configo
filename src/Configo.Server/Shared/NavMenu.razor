@using Configo.Server.Domain
@using Configo.Server.Blazor
@inject TagGroupManager TagGroupManager

<MudNavMenu>
    <MudNavLink Href="/" Match="NavLinkMatch.All" ActiveClass="">
        <MudImage Src="configo.png" Alt="Logo" Height="160"></MudImage>
    </MudNavLink>
    <MudNavLink Href="@($"/{Routes.TagGroups}")" Icon="@Icons.Material.Filled.Category" Match="NavLinkMatch.Prefix">Tag Groups</MudNavLink>
    @if (_tagGroups != null)
    {
        <MudNavGroup Title="Tags" Expanded="true" Icon="@Icons.Material.Filled.Label">
            @foreach (var tagGroup in _tagGroups)
            {
                <MudNavLink Href="@($"/{Routes.Tags(tagGroup.Name)}")" Icon="@tagGroup.GroupIcon.Value" Match="@NavLinkMatch.Prefix">@tagGroup.Name</MudNavLink>
            }
        </MudNavGroup>
    }
    <MudNavLink Href=@($"/{Routes.Applications}") Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.Cloud">Applications</MudNavLink>
    <MudNavLink Href=@($"/{Routes.ApiKeys}") Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.Key">API Keys</MudNavLink>
    <MudNavLink Href=@($"/{Routes.Variables}") Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.SettingsSuggest">Variables</MudNavLink>
</MudNavMenu>

@code {
    private List<TagGroupModel>? _tagGroups;
    private Func<CancellationToken, Task> _listener = default!;

    protected override async Task OnInitializedAsync()
    {
        _listener = ReloadAsync;
        TagGroupManager.Subscribe(_listener);
        await ReloadAsync(CancellationToken);
    }

    private async Task ReloadAsync(CancellationToken cancellationToken)
    {
        _tagGroups = await TagGroupManager.GetAllTagGroupsAsync(CancellationToken);
    }

    protected override ValueTask OnDisposeAsync()
    {
        TagGroupManager.Unsubscribe(_listener);
        return base.OnDisposeAsync();
    }
}
