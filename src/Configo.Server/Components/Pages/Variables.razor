@page "/variables"
@using Configo.Server.Domain
@inject ApplicationManager ApplicationManager
@inject TagGroupManager TagGroupManager
@inject TagManager TagManager
@inject VariableManager VariableManager
@inject SchemaManager SchemaManager
@inject IJSRuntime JsRuntime
@inject ISnackbar Snackbar

<MudText Typo="Typo.h4" GutterBottom="true">
    <MudIcon Icon="@Icons.Material.Filled.SettingsSuggest" Size="Size.Large"/> Variables
</MudText>

@if (_tags.Count == 0)
{
    <MudAlert Severity="Severity.Warning">Please create at least one tag</MudAlert>
    return;
}

@if (_applications.Count == 0)
{
    <MudAlert Severity="Severity.Warning">Please create at least one application</MudAlert>
    return;
}

<MudGrid>
    <MudItem sm="12" md="5" lg="4" xl="3">
        <MudCard Square="true" Class="mb-1">
            <MudCardHeader Class="py-2">
                <CardHeaderAvatar>
                    <MudAvatar Size="Size.Small" Variant="Variant.Filled">
                        <MudIcon Size="Size.Small" Icon="@Icons.Material.Filled.Settings" />
                    </MudAvatar>
                </CardHeaderAvatar>
                <CardHeaderContent>
                    <MudText>Settings</MudText>
                </CardHeaderContent>
            </MudCardHeader>
            <MudCardContent Class="py-0">
                <MudSwitch T="bool"
                           Value="@_showPendingChangesDiff"
                           ValueChanged="isChecked => OnShowPendingChanges((bool?)isChecked)"
                           Color="Color.Primary">
                    Show pending changes diff
                </MudSwitch>
            </MudCardContent>
            <MudCardActions>
                <MudButtonGroup OverrideStyles="false">
                    <MudButton Color="Color.Success"
                               Size="Size.Small"
                               Variant="Variant.Outlined"
                               Disabled="!_hasPendingChanges"
                               @onclick="SavePendingChanges">
                        <MudIcon Size="Size.Small" Icon="@Icons.Material.Filled.Save"/>
                        Save pending
                    </MudButton>
                    <MudButton Color="Color.Error"
                               Size="Size.Small"
                               Variant="Variant.Outlined"
                               Disabled="!_hasPendingChanges"
                               @onclick="DiscardPendingChanges">
                        <MudIcon Size="Size.Small" Icon="@Icons.Material.Filled.Delete"/>
                        Discard pending
                    </MudButton>
                </MudButtonGroup>
            </MudCardActions>
        </MudCard>

        <MudCard Square="true" Class="mb-1">
            <MudCardHeader Class="py-2">
                <CardHeaderAvatar>
                    <MudAvatar Size="Size.Small" Variant="Variant.Filled">
                        <MudIcon Size="Size.Small" Icon="@Icons.Material.Filled.Cloud"/>
                    </MudAvatar>
                </CardHeaderAvatar>
                <CardHeaderContent>
                    <MudText>Application</MudText>
                </CardHeaderContent>
            </MudCardHeader>
            <MudCardContent Class="py-0">
                <MudSelect T="int?" 
                           Value="_selectedApplicationId"
                           ValueChanged="OnChangeSelectedApplicationId"
                           Variant="Variant.Outlined"
                           Clearable="true"
                           Margin="Margin.Dense"
                           Dense="true"
                           Class="py-0" >
                    @foreach (var application in _applications)
                    {
                        <MudSelectItem T="int?" Value="@application.Id">@application.Name</MudSelectItem>
                    }
                </MudSelect>
            </MudCardContent>
        </MudCard>

        <MudCard Square="true" Class="mb-1">
            <MudCardHeader Class="py-2">
                <CardHeaderAvatar>
                    <MudAvatar Size="Size.Small" Variant="Variant.Filled">
                        <MudIcon Size="Size.Small" Icon="@Icons.Material.Filled.Tag"/>
                    </MudAvatar>
                </CardHeaderAvatar>
                <CardHeaderContent>
                    <MudText>Tag</MudText>
                </CardHeaderContent>
            </MudCardHeader>
            <MudCardContent Class="py-0">
                <MudSelect T="int?"
                           Value="_selectedTagGroupId"
                           ValueChanged="OnChangeSelectedTagGroupId"
                           Label="Tag group"
                           Placeholder="Filter by tag group"
                           Variant="Variant.Outlined"
                           Clearable="true"
                           Margin="Margin.Dense"
                           Dense="true">
                    @foreach (var tagGroup in _tagGroups)
                    {
                        <MudSelectItem Value="@((int?) tagGroup.Id)">@tagGroup.Name</MudSelectItem>
                    }
                </MudSelect>
                <MudSelect T="int?"
                           Value="_selectedTagId"
                           ValueChanged="OnChangeSelectedTagId"
                           Label="Tag"
                           Placeholder="Choose a tag"
                           Variant="Variant.Outlined"
                           Clearable="true"
                           Margin="Margin.Dense"
                           Dense="true">
                    @foreach (var tag in _availableTags)
                    {
                        <MudSelectItem Value="@((int?) tag.Id)">@tag.Name</MudSelectItem>
                    }
                </MudSelect>
            </MudCardContent>
        </MudCard>
    </MudItem>
    <MudItem sm="12" md="7" lg="8" xl="9">
        <MudCard>
            <MudCardHeader>
                <MudChipSet T="string">
                    @if(SelectedApplication is { } selectedApplication)
                    {
                        <MudChip T="string" Icon="@Icons.Material.Filled.Cloud"
                                 Color="Color.Primary" Text="@selectedApplication.Name" />
                    }
                    @if (SelectedTag is { } selectedTag)
                    {
                        <MudChip T="string" Icon="@Icons.Material.Filled.Tag"
                                 Color="Color.Primary">
                            @selectedTag.GroupName: @selectedTag.Name
                        </MudChip>
                    }
                </MudChipSet>
            </MudCardHeader>
            <MudCardContent>
                @* Editors go here *@
                <div id="variables-editor-container" class="container-fluid" style="min-height: 70vh">

                </div>
                <div id="variables-diff-editor-container" class="container-fluid" style="min-height: 70vh">

                </div>
            </MudCardContent>
        </MudCard>
    </MudItem>
</MudGrid>

@code {
    private DotNetObjectReference<Variables>? _objectReference;
    private List<TagGroupDropdownModel> _tagGroups = [];
    private List<TagDropdownModel> _tags = [];
    private readonly List<TagDropdownModel> _availableTags = [];
    private List<ApplicationModel> _applications = [];
    private bool _showPendingChangesDiff;
    private bool _hasPendingChanges;
    private int? _selectedTagGroupId;
    private int? _selectedTagId;
    private int? _selectedApplicationId;
    
    private Dictionary<int, ApplicationModel> _applicationsById = [];
    private Dictionary<int, TagDropdownModel> _tagsById = [];

    private TagDropdownModel? SelectedTag => _selectedTagId is null ? null : _tagsById[_selectedTagId.Value];
    private ApplicationModel? SelectedApplication => _selectedApplicationId is null ? null : _applicationsById[_selectedApplicationId.Value];

    protected override async Task OnInitializedAsync()
    {
        _applications = await ApplicationManager.GetAllApplicationsAsync(CancellationToken);
        _applicationsById = _applications.ToDictionary(a => a.Id);
        _tagGroups = await TagGroupManager.GetAllTagGroupsForDropdownAsync(CancellationToken);
        _tags = await TagManager.GetAllTagsForDropdownAsync(CancellationToken);
        _tagsById = _tags.ToDictionary(g => g.Id);
        _hasPendingChanges = await VariableManager.HasPendingChangesAsync(CancellationToken);
        await base.OnInitializedAsync();
    }

    public async Task SavePendingChanges()
    {
        await VariableManager.SavePendingChangesAsync(CancellationToken);

        _hasPendingChanges = false;
        _showPendingChangesDiff = false;

        await UpdateEditorAsync();

        Snackbar.Add("Pending changes saved successfully", Severity.Success);
    }

    public async Task DiscardPendingChanges()
    {
        await VariableManager.DiscardPendingChangesAsync(CancellationToken);

        _hasPendingChanges = false;
        _showPendingChangesDiff = false;

        await UpdateEditorAsync();
    }

    [JSInvokable]
    public async Task Save(string variables)
    {
        if (_selectedTagId is null)
        {
            return;
        }
        
        await VariableManager.SaveToPendingAsync(new VariablesEditModel
        {
            Json = variables,
            TagId = _selectedTagId.Value
        }, CancellationToken);

        Snackbar.Add("Variables saved to pending changes", Severity.Success);

        _hasPendingChanges = true;
        StateHasChanged();
    }

    protected override async ValueTask OnDisposeAsync()
    {
        if (_objectReference != null)
        {
            try
            {
                await JsRuntime.InvokeVoidAsync("variables.destroy", CancellationToken);
            }
            catch (JSDisconnectedException)
            {
                // Ignore
            }
            finally
            {
                _objectReference?.Dispose();
            }
        }

        await base.OnDisposeAsync();
    }

    private async Task UpdateEditorAsync()
    {
        if (_selectedTagId is null)
        {
            return;
        }
        
        _objectReference ??= DotNetObjectReference.Create(this);
        var schema = await SchemaManager.GetSchemaAsync(_selectedApplicationId, CancellationToken);
        var isReadonly = _showPendingChangesDiff;
        if (_showPendingChangesDiff)
        {
            var originalConfig = await VariableManager.GetConfigAsync(_selectedTagId.Value, CancellationToken);
            var modifiedConfig = await VariableManager.GetConfigWithPendingChangesAsync(_selectedTagId.Value, CancellationToken);
            await JsRuntime.InvokeVoidAsync("variables.updateDiffEditor", CancellationToken, _objectReference, originalConfig, modifiedConfig, schema);
        }
        else
        {
            var config = await VariableManager.GetConfigWithPendingChangesAsync(_selectedTagId.Value, CancellationToken);
            await JsRuntime.InvokeVoidAsync("variables.updateEditor", CancellationToken, _objectReference, config, schema, isReadonly);
        }
    }

    private async Task OnChangeSelectedTagGroupId(int? selectedTagGroupId)
    {
        _selectedTagGroupId = selectedTagGroupId;
        if (_selectedTagGroupId is {} tagGroupId)
        {
            _availableTags.Clear();
            _availableTags.AddRange(_tags.Where(t => t.GroupId == tagGroupId));

            if (SelectedTag is { } selectedTag && selectedTag.GroupId != tagGroupId)
            {
                _selectedTagId = null;
            }
        }
        else
        {
            _selectedTagId = null;
        }
        
        await UpdateEditorAsync();
    }

    private async Task OnChangeSelectedTagId(int? selectedTagId)
    {
        _selectedTagId = selectedTagId;
        await UpdateEditorAsync();
    }

    private async Task OnChangeSelectedApplicationId(int? selectedApplicationId)
    {
        _selectedApplicationId = selectedApplicationId;
        await UpdateEditorAsync();
    }

    private async Task OnShowPendingChanges(bool? value)
    {
        _showPendingChangesDiff = value == true;

        await UpdateEditorAsync();
    }

}
