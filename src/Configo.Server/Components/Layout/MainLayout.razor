@using Configo.Server.Domain
@inherits LayoutComponentBase

@inject AuthenticationStateProvider  AuthenticationStateProvider
@inject UserManager  UserManager

<MudThemeProvider IsDarkMode="true"/>
<MudDialogProvider/>
<MudPopoverProvider/>
<MudSnackbarProvider/>

<MudLayout>
    <MudAppBar Color="Color.Transparent" Elevation="0" Fixed="false">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit"
                       Edge="Edge.Start" OnClick="@(() => DrawerToggle())"/>
        @if (_user is not null)
        {
            <MudButton
                StartIcon="@Icons.Material.Filled.VerifiedUser" Color="Color.Success">@_user.Email
            </MudButton>
        }
    </MudAppBar>
    <MudDrawer @bind-Open="@_drawerOpen" Color="Color.Transparent" Elevation="0">
        <NavMenu/>
    </MudDrawer>
    <MudMainContent Style="padding-top: 0">
        <MudContainer MaxWidth="MaxWidth.ExtraLarge">
            @Body
        </MudContainer>
    </MudMainContent>
</MudLayout>

<div id="blazor-error-ui" data-nosnippet>
    An unhandled error has occurred.
    <a href="." class="reload">Reload</a>
    <span class="dismiss">🗙</span>
</div>

@code {
    bool _drawerOpen = true;
    private UserModel? _user;

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        
        var authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        _user = await UserManager.GetOrCreateUserAsync(authenticationState.User, CancellationToken.None);
    }
}
