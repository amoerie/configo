@page "/tag-groups"
@using System.Reflection
@using Configo.Server.Blazor
@using Configo.Server.Domain
@inject TagGroupManager TagGroupManager

<Heading Size="HeadingSize.Is1">
    <Icon Name="FaNames.FaTags"/> Tag Groups
</Heading>

@if (_tagGroups == null)
{
    <p>
        <em>Loading tag groups...</em>
    </p>
}
else
{
    <Table Hoverable>
        <TableHeader ThemeContrast="ThemeContrast.Light">
            <TableRow>
                <TableHeaderCell Style="width: 5%">Name</TableHeaderCell>
                <TableHeaderCell Style="width: 10%">Icon</TableHeaderCell>
                <TableHeaderCell Style="width: 20%"># Tags</TableHeaderCell>
                <TableHeaderCell Style="width: 20%">Updated UTC</TableHeaderCell>
                <TableHeaderCell Style="width: 20%"></TableHeaderCell>
            </TableRow>
        </TableHeader>
        <TableBody>
            @foreach (var tagGroup in TagGroupsToShow)
            {
                @if (_tagGroupBeingEdited?.Id == tagGroup.Id)
                {
                    <TableRow>
                        <TableRowCell ColumnSpan="5">
                            <EditForm Model="@_tagGroupBeingEdited" OnSubmit="@SaveTagGroup">
                                <Row>
                                    <Field ColumnSize="ColumnSize.Is3" >
                                        <TextEdit Placeholder="Name" @bind-Text="_tagGroupBeingEdited.Name" @ref=_tagGroupNameInput>
                                            <FieldHelp>Tag group names must be unique</FieldHelp>
                                        </TextEdit>
                                    </Field>
                                    <Field ColumnSize="ColumnSize.Is4">
                                        <Autocomplete TItem="string"
                                                      TValue="string"
                                                      Data="@IconNames"
                                                      TextField="@(item => item)"
                                                      ValueField="@(item => item)"
                                                      @bind-SelectedValue="@_tagGroupBeingEdited.Icon"
                                                      @bind-SelectedText="IconNameAutoCompleteText"
                                                      Placeholder="Search icons..."
                                                      Filter="AutocompleteFilter.Contains">
                                            <NotFoundContent Context="searchString">No applications found that contain @searchString</NotFoundContent>
                                            <ItemContent Context="iconName">
                                                <Icon Name="@iconName.Value"></Icon> @iconName.Text
                                            </ItemContent>
                                        </Autocomplete>
                                    </Field>
                                    <Field ColumnSize="ColumnSize.IsAuto" TextAlignment="TextAlignment.Start">
                                        <Button Color="Color.Success" Clicked="SaveTagGroup"><Icon Name="IconName.Check"/> Save</Button>
                                        <Button Color="Color.Secondary" Clicked="StopEditing"><Icon Name="IconName.Times"/> Cancel</Button>
                                    </Field>
                                </Row>
                            </EditForm>
                        </TableRowCell>
                    </TableRow>
                }
                else if (_tagGroupBeingDeleted?.Id == tagGroup.Id)
                {
                    <TableRow>
                        <TableRowCell ColumnSpan="5">
                            <EditForm Model="@_tagGroupBeingDeleted" OnSubmit="@ConfirmDeleteTagGroup" class="grid-table-row">
                                <InputNumber @bind-Value="_tagGroupBeingDeleted!.Id" hidden="hidden"/>
                                <Alert Color="Color.Warning" Visible>
                                    <AlertMessage>Are you sure?</AlertMessage>
                                    <AlertDescription>Deleting <Icon Name="@tagGroup.Icon"></Icon> @tagGroup.Name cannot be undone</AlertDescription>
                                </Alert>
                                <Button Color="Color.Danger" Clicked="ConfirmDeleteTagGroup"><Icon Name="IconName.Delete"/> Yes, delete it</Button>
                                <Button Color="Color.Secondary" Clicked="StopDeleting"><Icon Name="IconName.Times"/> No, keep it</Button>
                            </EditForm>
                        </TableRowCell>
                    </TableRow>
                }
                else
                {
                    <TableRow>
                        <TableRowHeader Style="cursor:pointer" Clicked="() => EditTagGroup(tagGroup)">
                            @tagGroup.Name
                        </TableRowHeader>
                        <TableRowCell Clicked="() => EditTagGroup(tagGroup)">
                            <Icon Name="@tagGroup.Icon"></Icon>
                        </TableRowCell>
                        <TableRowCell>
                            <Badge Color="Color.Primary" Pill Background="Background.Secondary">@tagGroup.NumberOfTags</Badge>
                        </TableRowCell>
                        <TableRowCell>@tagGroup.UpdatedAtUtc.ToString("g")</TableRowCell>
                        <TableRowCell>
                            <Button Color="Color.Danger" Clicked="() => DeleteTagGroup(tagGroup)"><Icon Name="IconName.Delete"/> Delete</Button>
                        </TableRowCell>
                    </TableRow>
                }
            }
        </TableBody>
    </Table>

    <div>
        <Button Color="Color.Success" Clicked="AddTagGroup"><Icon Name="IconName.PlusSquare"/> Add new tag group</Button>
    </div>
}

@code {
    private List<TagGroupListModel>? _tagGroups;
    private TagGroupEditModel? _tagGroupBeingEdited;
    private TagGroupDeleteModel? _tagGroupBeingDeleted;
    private TextEdit? _tagGroupNameInput;
    private static readonly List<string> IconNames = typeof(FaNames)
        .GetFields(BindingFlags.Public | BindingFlags.Static)
        .Where(fi => fi is { IsLiteral: true,IsInitOnly: false } && fi.FieldType == typeof(string))
        .Select(x => x.GetRawConstantValue())
        .OfType<string>()
        .ToList();

    private IEnumerable<TagGroupListModel> TagGroupsToShow
    {
        get
        {
            if (_tagGroups == null) yield break;
            foreach (var tagGroup in _tagGroups) yield return tagGroup;
            if (_tagGroupBeingEdited?.Id == 0)
            {
                yield return new TagGroupListModel
                {
                    Id = 0,
                    Name = _tagGroupBeingEdited.Name ?? "",
                    Icon = FaNames.FaTags,
                    UpdatedAtUtc = DateTime.UtcNow,
                    NumberOfTags = 0
                };
            }
        }
    }
    
    public string? IconNameAutoCompleteText { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _tagGroups = await TagGroupManager.GetAllTagGroupsAsync(CancellationToken);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (_tagGroupNameInput != null)
        {
            await _tagGroupNameInput.Focus();
        }
    }

    private void AddTagGroup()
    {
        _tagGroupBeingEdited = new TagGroupEditModel { Id = 0, Name = "", Icon = FaNames.FaTags };
    }

    private void EditTagGroup(TagGroupListModel tagGroup)
    {
        _tagGroupBeingEdited = new TagGroupEditModel { Id = tagGroup.Id, Name = tagGroup.Name, Icon = tagGroup.Icon };
    }

    private void DeleteTagGroup(TagGroupListModel tagGroup)
    {
        _tagGroupBeingDeleted = new TagGroupDeleteModel { Id = tagGroup.Id };
    }

    private async Task SaveTagGroup()
    {
        var tagGroup = await TagGroupManager.SaveTagGroupAsync(_tagGroupBeingEdited!, CancellationToken);
        if (_tagGroupBeingEdited!.Id == 0)
        {
            _tagGroups!.Add(tagGroup);
        }
        else
        {
            for (var i = 0; i < _tagGroups!.Count; i++)
            {
                if (_tagGroups[i].Id == _tagGroupBeingEdited!.Id)
                {
                    _tagGroups[i] = tagGroup;
                }
            }
        }
        StopEditing();
    }

    private async Task ConfirmDeleteTagGroup()
    {
        await TagGroupManager.DeleteTagGroupAsync(_tagGroupBeingDeleted!, CancellationToken);
        for (var i = 0; i < _tagGroups!.Count; i++)
        {
            if (_tagGroups[i].Id != _tagGroupBeingDeleted!.Id) continue;
            _tagGroups.RemoveAt(i);
            break;
        }
        _tagGroupBeingDeleted = null;
    }

    private void StopEditing()
    {
        _tagGroupBeingEdited = null;
        _tagGroupNameInput = null;
    }

    private void StopDeleting()
    {
        _tagGroupBeingDeleted = null;
    }

}
