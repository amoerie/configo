@page "/applications"
@using Configo.Server.Domain
@using System.Collections.ObjectModel
@inject ApplicationManager ApplicationManager
@inject IDialogService DialogService

<MudText Typo="Typo.h4" GutterBottom="true">
    Applications
</MudText>

@if (_applications == null)
{
    <MudProgressCircular Color="Color.Primary" Indeterminate="true"/>
    return;
}

<MudButton
    Variant="Variant.Filled"
    Size="Size.Large"
    OnClick="@AddNew" Color="@Color.Success" Class="add-item-btn" StartIcon="@Icons.Material.Filled.Add">
    Add new
</MudButton>

<MudDataGrid @ref="_dataGrid"
             Items="@_applications"
             Filterable="true"
             FilterMode="DataGridFilterMode.ColumnFilterRow"
             FilterCaseSensitivity="DataGridFilterCaseSensitivity.CaseInsensitive"
             ReadOnly="false"
             EditMode="DataGridEditMode.Form"
             EditTrigger="DataGridEditTrigger.OnRowClick"
             CanceledEditingItem="(ApplicationModel model) => DoNotSaveApplication(model)"
             CommittedItemChanges="(ApplicationModel model) => SaveApplication(model)">
    <Columns>
        <PropertyColumn Property="(ApplicationModel x) => x.Name" Title="Name"/>
        <PropertyColumn Property="(ApplicationModel x) => x.UpdatedAtUtc" Title="Updated" 
                        IsEditable="false" Filterable="false"
                        Format="u"/>
        <TemplateColumn IsEditable="false" Filterable="false" Sortable="false">
            <CellTemplate>
                <MudStack Row>
                    <MudButton Href="@(Routes.Schema(context.Item.Name))"
                               Size="Size.Small"
                               Variant="Variant.Filled" Color="Color.Secondary">
                        Manage JSON Schema
                    </MudButton>
                    <MudIconButton Size="@Size.Small"
                                   Icon="@Icons.Material.Filled.Delete"
                                   Variant="@Variant.Filled"
                                   Color="@Color.Error"
                                   @onclick="() => OpenDeleteDialogAsync(context.Item)">
                    </MudIconButton>
                </MudStack>
            </CellTemplate>
        </TemplateColumn>
    </Columns>
    <PagerContent>
        <MudDataGridPager T="ApplicationModel"/>
    </PagerContent>
</MudDataGrid>

@code {
    private ObservableCollection<ApplicationModel>? _applications;
    private MudDataGrid<ApplicationModel>? _dataGrid;

    protected override async Task OnInitializedAsync()
    {
        _applications = new ObservableCollection<ApplicationModel>(await ApplicationManager.GetAllApplicationsAsync(CancellationToken));
    }

    private async Task OpenDeleteDialogAsync(ApplicationModel application)
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        var parameters = new DialogParameters<DeleteDialog> { { x => x.ThingThatWillBeDeleted, application.Name } };
        var dialog = await DialogService.ShowAsync<DeleteDialog>("Delete", parameters, options);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            await ApplicationManager.DeleteApplicationAsync(application, CancellationToken);
            _applications!.Remove(application);
        }
    }

    private async Task SaveApplication(ApplicationModel model)
    {
        await ApplicationManager.SaveApplicationAsync(model, CancellationToken);
    }

    private void DoNotSaveApplication(ApplicationModel model)
    {
        if (model.Id == 0)
        {
            _applications!.Remove(model);
        }
    }

    private async Task AddNew()
    {
        var applicationModel = new ApplicationModel { Id = 0, Name = "", UpdatedAtUtc = DateTime.UtcNow };
        _applications!.Add(applicationModel);
        await _dataGrid!.SetEditingItemAsync(applicationModel);
    }
}
