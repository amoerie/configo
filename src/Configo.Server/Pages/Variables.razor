@page "/variables"
@using Configo.Server.Domain
@inject ApplicationManager ApplicationManager
@inject TagManager TagManager
@inject VariableManager VariableManager
@inject SchemaManager SchemaManager
@inject IJSRuntime JsRuntime
@inject ISnackbar Snackbar

<MudText Typo="Typo.h4" GutterBottom="true">
    Variables
</MudText>

@if (_tags == null || _applications == null)
{
    <MudProgressCircular Color="Color.Primary" Indeterminate="true"/>
    return;
}

<MudGrid>
    <MudItem sm="12" md="5" lg="4" xl="3">
        <MudCard Square="true" Class="mb-1">
            <MudCardHeader Class="py-2">
                <CardHeaderAvatar>
                    <MudAvatar Size="Size.Small" Variant="Variant.Filled">
                        <MudIcon Size="Size.Small" Icon="@Icons.Material.Filled.Settings"/>
                    </MudAvatar>
                </CardHeaderAvatar>
                <CardHeaderContent>
                    <MudText>Settings</MudText>
                </CardHeaderContent>
            </MudCardHeader>
            <MudCardContent Class="py-0">
                <MudSwitch T="bool" Value="@_showMerged"
                           ValueChanged="isChecked => OnShowMerged((bool?) isChecked)">Show merged
                </MudSwitch>
                <MudSwitch T="bool" Value="@_showPendingChangesDiff"
                           ValueChanged="isChecked => OnShowPendingChanges((bool?) isChecked)">Show pending changes
                    diff
                </MudSwitch>
            </MudCardContent>
            <MudCardActions>
                <MudButtonGroup OverrideStyles="false">
                    <MudButton Color="Color.Success"
                               Size="Size.Small"
                               Variant="Variant.Outlined"
                               Disabled="!_hasPendingChanges"
                               @onclick="SavePendingChanges">
                        <MudIcon Size="Size.Small" Icon="@Icons.Material.Filled.Save"/>
                        Save pending
                    </MudButton>
                    <MudButton Color="Color.Error"
                               Size="Size.Small"
                               Variant="Variant.Outlined"
                               Disabled="!_hasPendingChanges"
                               @onclick="DiscardPendingChanges">
                        <MudIcon Size="Size.Small" Icon="@Icons.Material.Filled.Delete"/>
                        Discard pending
                    </MudButton>
                </MudButtonGroup>
            </MudCardActions>
        </MudCard>

        <MudCard Square="true" Class="mb-1">
            <MudCardHeader Class="py-2">
                <CardHeaderAvatar>
                    <MudAvatar Size="Size.Small" Variant="Variant.Filled">
                        <MudIcon Size="Size.Small" Icon="@Icons.Material.Filled.Cloud"/>
                    </MudAvatar>
                </CardHeaderAvatar>
                <CardHeaderContent>
                    <MudText>Applications</MudText>
                </CardHeaderContent>
            </MudCardHeader>
            <MudCardContent Class="py-0">
                <MudSelect Class="py-0" T="int" @bind-Value="_selectedApplicationId" ValueChanged="async () => await UpdateEditorAsync()">
                    @foreach (var application in _applications)
                    {
                        <MudSelectItem Value="@application.Id">@application.Name</MudSelectItem>
                    }
                </MudSelect>
            </MudCardContent>
        </MudCard>

        <MudCard Square="true" Class="mb-1">
            <MudCardHeader Class="py-2">
                <CardHeaderAvatar>
                    <MudAvatar Size="Size.Small" Variant="Variant.Filled">
                        <MudIcon Size="Size.Small" Icon="@Icons.Material.Filled.Tag"/>
                    </MudAvatar>
                </CardHeaderAvatar>
                <CardHeaderContent>
                    <MudText>Tag</MudText>
                </CardHeaderContent>
            </MudCardHeader>
            <MudCardContent Class="py-0">
                <MudList Class="py-0" Gutters="false" T="TagModel">
                    @foreach (var tag in _tags)
                    {
                        <MudListItem Dense="true" T="TagModel">
                            <MudCheckBox T="bool"
                                         Dense="true"
                                         Size="Size.Small"
                                         Label="@tag.Name"
                                         Value="_selectedTagId == tag.Id"
                                         ValueChanged="isChecked => OnCheckTag(isChecked, tag.Id)">
                            </MudCheckBox>
                        </MudListItem>
                    }
                </MudList>
            </MudCardContent>
        </MudCard>
    </MudItem>
    <MudItem sm="12" md="7" lg="8" xl="9">
        <MudCard>
            <MudCardHeader>
                <MudChipSet T="string">
                    @if(_selectedApplication is not null)
                    {
                        <MudChip T="string" Icon="@Icons.Material.Filled.Cloud"
                                 Color="Color.Primary" Text="@_selectedApplication.Name" />
                    }
                    @if (_selectedTag is not null)
                    {
                        <MudChip T="string" Icon="@Icons.Material.Filled.Tag"
                                 Color="Color.Primary" Text="@_selectedTag.Name" />
                    }
                </MudChipSet>
            </MudCardHeader>
            <MudCardContent>
                @* Editors go here *@
                <div id="variables-editor-container" class="container-fluid" style="min-height: 70vh">

                </div>
                <div id="variables-diff-editor-container" class="container-fluid" style="min-height: 70vh">

                </div>
            </MudCardContent>
        </MudCard>
    </MudItem>
</MudGrid>

@code {
    private DotNetObjectReference<Variables>? _objectReference;
    private List<TagModel>? _tags;
    private List<ApplicationModel>? _applications;
    private bool _showMerged;
    private bool _showPendingChangesDiff;
    private bool _hasPendingChanges;
    private int? _selectedTagId;
    private int? _selectedApplicationId;
    private TagModel? _selectedTag;
    private ApplicationModel? _selectedApplication;

    private Dictionary<int, ApplicationModel> _applicationsById = new Dictionary<int, ApplicationModel>();
    private Dictionary<int, TagModel> _tagsById = new Dictionary<int, TagModel>();

    protected override async Task OnInitializedAsync()
    {
        _applications = await ApplicationManager.GetAllApplicationsAsync(CancellationToken);
        _applicationsById = _applications.ToDictionary(a => a.Id);
        _tags = await TagManager.GetAllTagsAsync(CancellationToken);
        _tagsById = _tags.ToDictionary(g => g.Id);
        _hasPendingChanges = await VariableManager.HasPendingChangesAsync(CancellationToken);
        await base.OnInitializedAsync();
    }

    public async Task SavePendingChanges()
    {
        await VariableManager.SavePendingChangesAsync(CancellationToken);

        _hasPendingChanges = false;
        _showPendingChangesDiff = false;

        await UpdateEditorAsync();

        Snackbar.Add("Pending changes saved successfully", Severity.Success);
    }

    public async Task DiscardPendingChanges()
    {
        await VariableManager.DiscardPendingChangesAsync(CancellationToken);

        _hasPendingChanges = false;
        _showPendingChangesDiff = false;

        await UpdateEditorAsync();
    }

    [JSInvokable]
    public async Task Save(string variables)
    {
        await VariableManager.SaveToPendingAsync(new VariablesEditModel
        {
            Json = variables,
            TagId = _selectedTagId
        }, CancellationToken);

        Snackbar.Add("Variables saved to pending changes", Severity.Success);

        _hasPendingChanges = true;
        StateHasChanged();
    }

    protected override async ValueTask OnDisposeAsync()
    {
        if (_objectReference != null)
        {
            try
            {
                await JsRuntime.InvokeVoidAsync("variables.destroy", CancellationToken);
            }
            catch (JSDisconnectedException)
            {
                // Ignore
            }
            finally
            {
                _objectReference?.Dispose();
            }
        }

        await base.OnDisposeAsync();
    }

    private async Task UpdateEditorAsync()
    {
        _selectedApplication = _selectedApplicationId is null ? null : _applicationsById[_selectedApplicationId.Value];
        _selectedTag = _selectedTagId is null ? null : _tagsById[_selectedTagId.Value];
        _objectReference ??= DotNetObjectReference.Create(this);
        var schema = await SchemaManager.GetSchemaAsync(_selectedApplicationId, CancellationToken);
        var isReadonly = _showMerged || _showPendingChangesDiff;
        List<int> selectedTagIds = _selectedTagId is null ? [] : [_selectedTagId.Value]; 
        if (_showPendingChangesDiff)
        {
            var originalConfig = _showMerged
                ? await VariableManager.GetMergedConfigAsync(selectedTagIds, CancellationToken)
                : await VariableManager.GetConfigAsync(_selectedTagId, CancellationToken);
            var modifiedConfig = _showMerged
                ? await VariableManager.GetMergedConfigWithPendingChangesAsync(selectedTagIds, CancellationToken)
                : await VariableManager.GetConfigWithPendingChangesAsync(_selectedTagId, CancellationToken);

            await JsRuntime.InvokeVoidAsync("variables.updateDiffEditor", CancellationToken, _objectReference, originalConfig, modifiedConfig, schema);
        }
        else
        {
            var config = _showMerged
                ? await VariableManager.GetMergedConfigWithPendingChangesAsync(selectedTagIds, CancellationToken)
                : await VariableManager.GetConfigWithPendingChangesAsync(_selectedTagId, CancellationToken);
            await JsRuntime.InvokeVoidAsync("variables.updateEditor", CancellationToken, _objectReference, config, schema, isReadonly);
        }
    }

    private async Task OnCheckTag(bool? isChecked, int tagId)
    {
        if (isChecked == true)
        {
            _selectedTagId = tagId;
        }
        else
        {
            _selectedTagId = null;
        }

        await UpdateEditorAsync();
    }

    private async Task OnShowMerged(bool? value)
    {
        _showMerged = value == true;

        await UpdateEditorAsync();
    }

    private async Task OnShowPendingChanges(bool? value)
    {
        _showPendingChangesDiff = value == true;

        await UpdateEditorAsync();
    }

}
