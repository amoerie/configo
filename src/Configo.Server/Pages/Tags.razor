@page "/tags/{group}"
@using Configo.Server.Domain
@using System.Collections.ObjectModel
@inject TagGroupManager TagGroupManager
@inject TagManager TagManager
@inject IDialogService DialogService

@if (_tagGroup == null || _tags == null)
{
    <MudProgressCircular Color="Color.Primary" Indeterminate="true"/>
    return;
}

<MudText Typo="Typo.h4" GutterBottom="true">
    <MudIcon Icon="@_tagGroup.Icon.Value" Size="Size.Large"/> @_tagGroup.Name
</MudText>

<MudButton
    Variant="Variant.Filled"
    Size="Size.Large"
    OnClick="@AddNew" Color="@Color.Success" Class="add-item-btn" StartIcon="@Icons.Material.Filled.Add">
    Add new
</MudButton>

<MudDataGrid @ref="_dataGrid"
             Items="@_tags"
             Filterable="true"
             FilterMode="DataGridFilterMode.ColumnFilterRow"
             FilterCaseSensitivity="DataGridFilterCaseSensitivity.CaseInsensitive"
             ReadOnly="false"
             EditMode="DataGridEditMode.Form"
             EditTrigger="DataGridEditTrigger.OnRowClick"
             CanceledEditingItem="(TagModel model) => DoNotSaveTag(model)"
             CommittedItemChanges="(TagModel model) => SaveTag(model)">
    <Columns>
        <PropertyColumn Property="(TagModel x) => x.Name" Title="Name"/>
        <TemplateColumn Title="# Variables" IsEditable="false" Filterable="false"
                        Sortable="true" SortBy="(TagModel model) => model.NumberOfVariables">
            <CellTemplate>
                <MudChip Color="Color.Primary">@context.Item.NumberOfVariables</MudChip>
            </CellTemplate>
        </TemplateColumn>
        <PropertyColumn Property="(TagModel x) => x.UpdatedAtUtc" Title="Updated" IsEditable="false" Format="u" Filterable="false"/>
        <TemplateColumn IsEditable="false" Filterable="false" Sortable="false">
            <CellTemplate>
                <MudStack Row>
                    <MudIconButton Size="@Size.Small"
                                   Icon="@Icons.Material.Filled.Delete"
                                   Variant="@Variant.Filled"
                                   Color="@Color.Error"
                                   @onclick="() => OpenDeleteDialogAsync(context.Item)">
                    </MudIconButton>
                </MudStack>
            </CellTemplate>
        </TemplateColumn>
    </Columns>
    <PagerContent>
        <MudDataGridPager T="TagModel"/>
    </PagerContent>
</MudDataGrid>

@code {
    private ObservableCollection<TagModel>? _tags;
    private MudDataGrid<TagModel>? _dataGrid;

    private TagGroupModel? _tagGroup;

    [Parameter]
    public string? Group { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        if (Group == null)
        {
            throw new InvalidOperationException("Oi, where is the group");
        }
        _tagGroup = await TagGroupManager.GetTagGroupAsync(Group, CancellationToken);
        _tags = new ObservableCollection<TagModel>(await TagManager.GetTagsOfGroupAsync(_tagGroup.Id, CancellationToken));
    }

    private async Task OpenDeleteDialogAsync(TagModel tag)
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        var parameters = new DialogParameters<DeleteDialog> { { x => x.ThingThatWillBeDeleted, tag.Name } };
        var dialog = await DialogService.ShowAsync<DeleteDialog>("Delete", parameters, options);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            await TagManager.DeleteTagAsync(tag, CancellationToken);
            _tags!.Remove(tag);
        }
    }

    private async Task SaveTag(TagModel model)
    {
        await TagManager.SaveTagAsync(model, CancellationToken);
    }

    private void DoNotSaveTag(TagModel model)
    {
        if (model.Id == 0)
        {
            _tags!.Remove(model);
        }
    }

    private async Task AddNew()
    {
        var model = new TagModel
        {
            Id = 0, Name = "",
            GroupId = _tagGroup!.Id,
            GroupIcon = _tagGroup!.Icon,
            NumberOfVariables = 0, UpdatedAtUtc = DateTime.UtcNow
        };
        _tags!.Add(model);
        await _dataGrid!.SetEditingItemAsync(model);
    }

}
