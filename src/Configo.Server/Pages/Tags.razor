@page "/tags"
@using Configo.Server.Domain
@using System.Collections.ObjectModel
@inject TagManager TagManager
@inject TagGroupManager TagGroupManager
@inject IDialogService DialogService

@if (_tags is null || _tagGroups is null)
{
    <MudProgressCircular Color="Color.Primary" Indeterminate="true"/>
    return;
}

@if (_tagGroups.Count == 0)
{
    <MudAlert Severity="Severity.Warning">Please create a tag group first</MudAlert>
    return;
}

<MudText Typo="Typo.h4" GutterBottom="true">
    <MudIcon Icon="@Icons.Material.Filled.Tag" Size="Size.Large"/> Tags
</MudText>

<MudButton
    Variant="Variant.Filled"
    Size="Size.Large"
    OnClick="@(async () => await Add())" Color="@Color.Success" Class="add-item-btn" StartIcon="@Icons.Material.Filled.Add">
    Add new
</MudButton>

<MudDataGrid @ref="_dataGrid"
             T="TagListModel"
             Items="@_tags"
             Filterable="true"
             FilterMode="DataGridFilterMode.ColumnFilterRow"
             FilterCaseSensitivity="DataGridFilterCaseSensitivity.CaseInsensitive"
             RowClick="@(async e => await Edit(e.Item))"
             ReadOnly="true">
    <Columns>
        <PropertyColumn Property="(TagListModel t) => t.TagGroupName" Title="Group"/>
        <PropertyColumn Property="(TagListModel t) => t.Name" Title="Name"/>
        <TemplateColumn Title="# Variables" Editable="false" Filterable="false"
                        Sortable="true" SortBy="(TagListModel formModel) => formModel.NumberOfVariables">
            <CellTemplate>
                <MudChip Color="Color.Primary">@context.Item.NumberOfVariables</MudChip>
            </CellTemplate>
        </TemplateColumn>
        <PropertyColumn Property="(TagListModel x) => x.UpdatedAtUtc" Title="Updated" Editable="false" Format="u"
                        Filterable="false"/>
        <TemplateColumn Editable="false" Filterable="false" Sortable="false">
            <CellTemplate>
                <MudStack Row>
                    <MudIconButton Size="@Size.Small"
                                   Icon="@Icons.Material.Filled.Delete"
                                   Variant="@Variant.Filled"
                                   Color="@Color.Error"
                                   @onclick="() => OpenDeleteDialogAsync(context.Item)">
                    </MudIconButton>
                </MudStack>
            </CellTemplate>
        </TemplateColumn>
    </Columns>
    <PagerContent>
        <MudDataGridPager T="TagListModel"/>
    </PagerContent>
</MudDataGrid>

@code {
    private ObservableCollection<TagListModel>? _tags;
    private MudDataGrid<TagListModel>? _dataGrid;
    private List<TagGroupModel>? _tagGroups;

    protected override async Task OnParametersSetAsync()
    {
        _tagGroups = await TagGroupManager.GetAllTagGroupsAsync(CancellationToken);
        _tags = new ObservableCollection<TagListModel>(await TagManager.GetAllTagsAsync(CancellationToken));
    }

    private async Task OpenEditDialogAsync(TagFormModel tag)
    {
        var options = new DialogOptions { CloseOnEscapeKey = true, FullWidth = true };
        var parameters = new DialogParameters<TagFormDialog> { { x => x.Tag, tag } };
        var dialog = await DialogService.ShowAsync<TagFormDialog>("Tag Form", parameters, options);
        var result = await dialog.Result;
        if (result is { Canceled: false, Data: TagFormModel submittedTagFormModel })
        {
            await TagManager.SaveTagAsync(submittedTagFormModel, CancellationToken);
            await Refresh();
        }
    }

    private async Task OpenDeleteDialogAsync(TagListModel tag)
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        var parameters = new DialogParameters<DeleteDialog> { { x => x.ThingThatWillBeDeleted, tag.Name } };
        var dialog = await DialogService.ShowAsync<DeleteDialog>("Delete", parameters, options);
        var result = await dialog.Result;
        if (result is not null && !result.Canceled)
        {
            await TagManager.DeleteTagAsync(tag, CancellationToken);
            await Refresh();
        }
    }

    private async Task Add()
    {
        var tagFormModel = new TagFormModel { Name = "", TagGroupId = _tagGroups?.FirstOrDefault()?.Id ?? 0};
        await OpenEditDialogAsync(tagFormModel);
    }

    private async Task Edit(TagListModel tag)
    {
        var tagFormModel = new TagFormModel { Id = tag.Id, Name = tag.Name, TagGroupId = tag.TagGroupId };
        await OpenEditDialogAsync(tagFormModel);
    }
    
    private async Task Refresh()
    {
        if (_tags is null)
        {
            return;
        }

        _tags.Clear();
        var tags = await TagManager.GetAllTagsAsync(CancellationToken);
        foreach (var tag in tags)
        {
            _tags.Add(tag);
        }
    }

}
