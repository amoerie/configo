@page "/"
@using Configo.Server.Domain
@inject ApplicationManager ApplicationManager
@inject TagManager TagManager
@inject ApiKeyManager ApiKeyManager

@if (_tags == null || _applications == null || _apiKeys == null)
{
    <p>...loading</p>
    return;
}

<MudText Typo="Typo.h1" GutterBottom="true">
    Configo
</MudText>

<MudGrid>
    <MudItem xs="12" sm="6" md="4" lg="3" xl="2">
        <MudCard>
            <MudCardHeader>
                <CardHeaderContent>
                    <MudText Typo="Typo.h6">
                        <MudIcon Icon="@Icons.Material.Filled.Category"/>
                        Tags
                    </MudText>
                    <MudText Typo="Typo.caption">
                        Tags describe a characteristic of a deployed application.
                        Possible tags are environments, timezones, machines, ...
                    </MudText>
                </CardHeaderContent>
            </MudCardHeader>
            <MudCardContent>
                <MudList Gutters="false" T="string">
                    @foreach (var tag in _tags)
                    {
                        <MudListItem Text="@tag.Name"/>
                    }
                </MudList>
            </MudCardContent>
            <MudCardActions>
                <MudButton Color="Color.Primary" Href="@Routes.Tags">Manage</MudButton>
            </MudCardActions>
        </MudCard>
    </MudItem>

    <MudItem xs="12" sm="6" md="4" lg="3" xl="2">
        <MudCard>
            <MudCardHeader>
                <CardHeaderContent>
                    <MudText Typo="Typo.h6">
                        <MudIcon Icon="@Icons.Material.Filled.Cloud"/>
                        Applications
                    </MudText>
                    <MudText Typo="Typo.caption">
                        Applications are unique types of processes, each with a different JSON configuration schema.
                    </MudText>
                </CardHeaderContent>
            </MudCardHeader>
            <MudCardContent>
                <MudList Gutters="false" T="string">
                    @foreach (var application in _applications)
                    {
                        <MudListItem Text="@application.Name"/>
                    }
                </MudList>
            </MudCardContent>
            <MudCardActions>
                <MudButton Color="Color.Primary" Href="@Routes.Applications">Manage</MudButton>
            </MudCardActions>
        </MudCard>
    </MudItem>

    <MudItem xs="12" sm="6" md="4" lg="3" xl="2">
        <MudCard>
            <MudCardHeader>
                <CardHeaderContent>
                    <MudText Typo="Typo.h6">
                        <MudIcon Icon="@Icons.Material.Filled.Category"/>
                        API Keys
                    </MudText>
                    <MudText Typo="Typo.caption">
                        API keys give a single instance of a deployed application access to its configuration.
                        An API key is constrained to one application and zero or more tags
                    </MudText>
                </CardHeaderContent>
            </MudCardHeader>
            <MudCardContent>
                <MudList Gutters="false" T="string">
                    @foreach (var apiKey in _apiKeys)
                    {
                        <MudListItem Text="@(apiKey.Key.Substring(0, 5) + "...")"></MudListItem>
                    }
                </MudList>
            </MudCardContent>
            <MudCardActions>
                <MudButton Color="Color.Primary" Href="@Routes.ApiKeys">Manage</MudButton>
            </MudCardActions>
        </MudCard>
    </MudItem>
</MudGrid>

@code {
    private List<TagModel>? _tags;
    private List<ApplicationModel>? _applications;
    private List<ApiKeyModel>? _apiKeys;

    protected override async Task OnInitializedAsync()
    {
        _applications = await ApplicationManager.GetAllApplicationsAsync(CancellationToken);
        _tags = await TagManager.GetAllTagsAsync(CancellationToken);
        _apiKeys = await ApiKeyManager.GetAllApiKeysAsync(CancellationToken);
        await base.OnInitializedAsync();
    }

}
