@page "/api-keys"
@using Configo.Server.Domain
@using System.Collections.ObjectModel
@using System.Text
@inject ApiKeyManager ApiKeyManager
@inject TagManager TagManager
@inject ApplicationManager ApplicationManager
@inject IJSRuntime JsRuntime
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<MudText Typo="Typo.h4" GutterBottom="true">
    API keys
</MudText>


@if (_apiKeys == null || _applications == null || _tags == null || _applicationsById == null || _tagsById == null)
{
    <MudProgressCircular Color="Color.Primary" Indeterminate="true"/>
    return;
}

<MudButton
    Variant="Variant.Filled"
    Size="Size.Large"
    OnClick="@AddNew" Color="@Color.Success" Class="add-item-btn" StartIcon="@Icons.Material.Filled.Add">
    Add new
</MudButton>

<MudDataGrid @ref="_dataGrid"
             Items="@_apiKeys"
             Filterable="true"
             FilterMode="DataGridFilterMode.ColumnFilterRow"
             FilterCaseSensitivity="DataGridFilterCaseSensitivity.CaseInsensitive"
             ReadOnly="false"
             EditDialogOptions="new DialogOptions { FullWidth = true }"
             EditMode="DataGridEditMode.Form"
             EditTrigger="DataGridEditTrigger.OnRowClick"
             CanceledEditingItem="(ApiKeyModel model) => DoNotSaveApiKey(model)"
             CommittedItemChanges="(ApiKeyModel model) => SaveApiKey(model)">
    <Columns>
        <TemplateColumn T="ApiKeyModel" Title="Application" Filterable="false" Sortable="true" SortBy="GetApplicationName">
            <CellTemplate>
                @if (context.Item.ApplicationId != 0)
                {
                    @_applicationsById[context.Item.ApplicationId].Name
                }
            </CellTemplate>
            <EditTemplate>
                <MudSelect T="int" Label="Application" @bind-Value="context.Item.ApplicationId">
                    @foreach (var application in _applications)
                    {
                        <MudSelectItem Value="@application.Id">@application.Name</MudSelectItem>
                    }
                </MudSelect>
            </EditTemplate>
        </TemplateColumn>
        <TemplateColumn T="ApiKeyModel" Title="Tags" Filterable="false" Sortable="true" SortBy="GetTagNames">
            <CellTemplate>
                @foreach (var tagId in context.Item.TagIds)
                {
                    if (!_tagsById!.TryGetValue(tagId, out var tag))
                    {
                        continue;
                    }
                    <MudChip>@tag.Name</MudChip>
                }
            </CellTemplate>
            <EditTemplate>
                <MudSelect T="int" Label="Tags" MultiSelection="true" 
                           @bind-SelectedValues="context.Item.TagIds"
                           MultiSelectionTextFunc="GetTagNames">
                    @foreach (var tag in _tags)
                    {
                        <MudSelectItem T="int" Value="@tag.Id">
                            @tag.Name
                        </MudSelectItem>
                    }
                </MudSelect>
            </EditTemplate>
        </TemplateColumn>
        <TemplateColumn T="ApiKeyModel" Title="Key" Sortable="false" Filterable="false" IsEditable="false">
            <CellTemplate>
                @if (context.Item.Key.Length > 10)
                {
                    <mark>@(context.Item.Key.Substring(0, 3))...@context.Item.Key.Substring(context.Item.Key.Length - 3)</mark>
                    <MudTooltip Text="Copy to clipboard">
                        <MudButton StartIcon="@Icons.Material.Filled.FileCopy" @onclick="() => CopyKeyToClipboard(context.Item)"/>
                    </MudTooltip>
                }
            </CellTemplate>
        </TemplateColumn>
        <PropertyColumn T="ApiKeyModel" TProperty="DateTime" Property="x => x.ActiveSinceUtc" Title="Active Since" 
                        IsEditable="true" Filterable="false" Sortable="true" Format="u" />
        <PropertyColumn T="ApiKeyModel" TProperty="DateTime" Property="x => x.ActiveUntilUtc" Title="Active Until" 
                        IsEditable="true" Filterable="false" Sortable="true" Format="u" />
        <PropertyColumn T="ApiKeyModel" TProperty="DateTime" Property="x => x.UpdatedAtUtc" Title="Updated" 
                        IsEditable="true" Filterable="false" Sortable="true" Format="u" />
        <TemplateColumn IsEditable="false" Filterable="false" Sortable="false">
            <CellTemplate>
                <MudStack Row>
                    <MudIconButton Size="@Size.Small"
                                   Icon="@Icons.Material.Filled.Delete"
                                   Variant="@Variant.Filled"
                                   Color="@Color.Error"
                                   @onclick="() => OpenDeleteDialogAsync(context.Item)">
                    </MudIconButton>
                </MudStack>
            </CellTemplate>
        </TemplateColumn>
    </Columns>
    <PagerContent>
        <MudDataGridPager T="ApiKeyModel"/>
    </PagerContent>
</MudDataGrid>


@code {
    private ObservableCollection<ApiKeyModel>? _apiKeys;
    private MudDataGrid<ApiKeyModel>? _dataGrid;
    private List<TagDropdownModel>? _tags;
    private List<ApplicationDropdownModel>? _applications;
    private Dictionary<int, TagDropdownModel>? _tagsById;
    private Dictionary<int, ApplicationDropdownModel>? _applicationsById;

    protected override async Task OnInitializedAsync()
    {
        _apiKeys = new ObservableCollection<ApiKeyModel>(await ApiKeyManager.GetAllApiKeysAsync(CancellationToken));
        _tags = await TagManager.GetAllTagsForDropdownAsync(CancellationToken);
        _tagsById = _tags.ToDictionary(t => t.Id);
        _applications = await ApplicationManager.GetAllApplicationsForDropdownAsync(CancellationToken);
        _applicationsById = _applications.ToDictionary(a => a.Id);
    }

    private async Task OpenDeleteDialogAsync(ApiKeyModel apiKey)
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        var label = apiKey.ApplicationId == 0
            ? "API key"
            : $"API key for application {_applicationsById![apiKey.ApplicationId].Name}";
        var parameters = new DialogParameters<DeleteDialog> { { x => x.ThingThatWillBeDeleted, label } };
        var dialog = await DialogService.ShowAsync<DeleteDialog>("Delete", parameters, options);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            await ApiKeyManager.DeleteApiKeyAsync(apiKey, CancellationToken);
            _apiKeys!.Remove(apiKey);
        }
    }

    private async Task SaveApiKey(ApiKeyModel model)
    {
        await ApiKeyManager.SaveApiKeyAsync(model, CancellationToken);
    }

    private void DoNotSaveApiKey(ApiKeyModel model)
    {
        if (model.Id == 0)
        {
            _apiKeys!.Remove(model);
        }
    }

    private async Task AddNew()
    {
        var apiKeyModel = new ApiKeyModel
        {
            Id = 0,
            Key = "",
            ApplicationId = _applications?.Count > 0 ? _applications[0].Id : 0,
            TagIds = new List<int>(),
            ActiveSinceUtc = DateTime.UtcNow,
            ActiveUntilUtc = DateTime.UtcNow.AddYears(10),
            UpdatedAtUtc = DateTime.UtcNow,
        };
        _apiKeys!.Add(apiKeyModel);
        await _dataGrid!.SetEditingItemAsync(apiKeyModel);
    }

    private async Task CopyKeyToClipboard(ApiKeyModel apiKey)
    {
        await JsRuntime.InvokeVoidAsync("clipboardHelper.copyText", apiKey.Key);
        Snackbar?.Add("API key copied to clipboard", Severity.Info);
    }

    private string GetApplicationName(ApiKeyModel apiKeyModel)
    {
        return _applicationsById != null && _applicationsById.TryGetValue(apiKeyModel.ApplicationId, out var application)
            ? application.Name : "";
    }

    private string GetTagNames(ApiKeyModel apiKeyModel)
    {
        if (_tagsById == null)
        {
            return "";
        }
        var sb = new StringBuilder();
        foreach (var tagId in apiKeyModel.TagIds)
        {
            if (_tagsById.TryGetValue(tagId, out var tag))
            {
                sb.Append(tag.Name);
                sb.Append(", ");
            }
        }
        return sb.ToString().TrimEnd(' ').TrimEnd(',');
    }

    private string GetTagNames(List<string> selectedTagIds)
    {
        return string.Join(", ", selectedTagIds.Select(id => int.TryParse(id, out var parsed) ? (int?)parsed : null)
            .Where(i => i.HasValue)
            .Select(i => i!.Value)
            .Select(id => _tagsById != null && _tagsById.TryGetValue(id, out var tag) ? (TagDropdownModel?)tag : null)
            .Where(tag => tag != null)
            .Select(tag => tag!.Name));
    }

}
